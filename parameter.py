from collections import namedtuple
from dataclasses import dataclass
# -*- coding: utf-8 -*-

from random import randint, choice
from tkinter import font
from typing import Literal

MAX_WIDTH = 1024
MAX_HEIGHT = 600

CARRE_PAR_LIGNE = 60
CARRE_PAR_COLONNE = 40
SPS = 25

# nombre maximum de choix de villages pour changer de page
RBTN_MAX_VIL = 2

HEIGHT_HUD_TOP_SIDE = 60
HEIGHT_BOTTOM_HUD = 80
HEIGHT_EVENT = 50

PADY_BOTTOM_HUD = 5
PADX_BOTTOM_HUD = 5
SIZE_ACTION_ADDITIONAL_COST_TEXT = 12

PADY_BUILD_CITY_HUD = 5 + HEIGHT_HUD_TOP_SIDE
PADY_BUILD_CITY_HUD_HIDING = -20 + HEIGHT_HUD_TOP_SIDE

WIDTH_HISTORY_HUD = 150

PA = 10

DELTA_MS_ANIMATION = 1000 // 60  # 1000 ms = 1s / 60 (pour avoir 60 images par secondes)

# UNIQUEMENT POUR LES TESTS
NB_NOBLE_AU_DEPART = 4

# RIEN
NOTHING_TAG = "NOTHING"

# Hi√©rarchie MAP
MAP_TAG = "MAP"
PLAINE_TAG = "PLAIN"
FOREST_TAG = "FOREST"
MOUNTAIN_TAG = "MOUNTAIN"
LAKE_TAG = "LAKE"
VILLAGE_TAG = "VILLAGE"

# Tas de tag MAP
MAP_SQUARE_TOP_LEFT_TAG = "map_square_top_left"
MAP_SQUARE_BOTTOM_RIGHT_TAG = "map_square_bottom_right"

# Highlight tags
CLICKABLE_TAG = "CLICKABLE"
TOGGLEABLE_TAG = "TOGGLEABLE"
DRAGGABLE_TAG = "DRAGGABLE"
HIGHLIGHT_BUTTON_TAG = "HIGHLIGHT_BUTTON"

# Tas de tags HUDs
TEXT_TAG = "TEXT"
HISTORY_TEXT = "HISTORY_TEXT"
TEMP_TAG = "TEMP"

# Tag qui trigger les fonctions appropri√©es
MORE_INFO_TAG = "MORE_INFO"
CHANGE_PAGE_MINUS = "CPM"
CHANGE_PAGE_PLUS = "CPP"
SHOW_OR_HIDE_PAGE_TAG = "SHOW_OR_HIDE_PAGE"
SHOW_OR_HIDE_HISTORY_TAG = "SHOW_OR_HIDE_HISTORY"
SCROLLBAR_TAG = "SCROLLBAR_TAG"
RECTANGLE_ACTION = "RECTANGLE_ACTION"
BUILD_CITY = "BUILD_CITY"
BUILD_CHURCH = "BUILD_CHURCH"
PLUS_IMMIGRANTS_TAG = "ADD_IMMIGRANTS"
MINUS_IMMIGRANTS_TAG = "MINUS_IMMIGRANTS"
INFO_EVENT_TAG = "INFO_EVENT"
PAYSAN_OR_ARTISAN_TAG = "PAYSAN_OR_ARTISAN"
TAXES_TAG = "TAXES"
VASSALIZE_TAG = "VASSALIZE"
WAR_TAG = "WAR"

OPEN_WINDOW_TAG = "OPEN_WINDOW"

# si
si = 'si'

@dataclass
class ActionCost:
    pa: int
    argent: int = 0
    ressources: int = 0

ACTIONS_NAME_COST: [str, ActionCost] = {
    PAYSAN_OR_ARTISAN_TAG: ActionCost(1),
    "Soldat": ActionCost(2, argent=20),
    BUILD_CHURCH: ActionCost(6, 100, 50),
    VASSALIZE_TAG: ActionCost(4),
    BUILD_CITY: ActionCost(8, 300, 150),
    TAXES_TAG: ActionCost(5),
    WAR_TAG: ActionCost(8, ressources=100)
}

# LES ACTIONS SONT DANS L'ORDRE SUIVANT : DE GAUCHE A DROITE **PUIS** DE HAUT EN BAS
ACTION_FOR_YOUR_TURN = [
    {
        "text": "Agrandir population",
        "PA": "1-10 PA",
        "additionalcost": "0-100 üí∞",
        "do": PAYSAN_OR_ARTISAN_TAG
    },
    {
        "text": "Construire une √©glise",
        "PA": f"{ACTIONS_NAME_COST[BUILD_CHURCH].pa} PA",
        "additionalcost": "100 üí∞, 50 üç¥",
        "do": BUILD_CHURCH
    },
    {
        "text": "Vassaliser",
        "PA": f"{ACTIONS_NAME_COST[VASSALIZE_TAG].pa} PA",
        "additionalcost": "Y üí∞, Z üç¥",
        "do": VASSALIZE_TAG
    },
    {
        "text": "Construire un village",
        "PA": f"{ACTIONS_NAME_COST[BUILD_CITY].pa} PA",
        "additionalcost": "300 üí∞, 150 üç¥",
        "do": BUILD_CITY
    },
    {
        "text": "Imp√¥t",
        "PA": f"{ACTIONS_NAME_COST[TAXES_TAG].pa} PA",
        "additionalcost": "",
        "do": TAXES_TAG
    },
    {
        "text": "D√©clarer la guerre",
        "PA": f"{ACTIONS_NAME_COST[WAR_TAG].pa} PA",
        "additionalcost": "100 üç¥",
        "do": WAR_TAG
    }
]
NB_ACTIONS = len(ACTION_FOR_YOUR_TURN)
NB_ACTION_PER_PAGE = 2

def rgb_to_hex(r, g, b):
    return f"#{r:02x}{g:02x}{b:02x}"

def mountain_color():
    a = randint(120, 200)
    return rgb_to_hex(a, a, a)

couleurs = {
    PLAINE_TAG: lambda: rgb_to_hex(randint(63, 139), randint(200, 230), randint(17, 114)),
    FOREST_TAG: lambda: rgb_to_hex(randint(20, 50), randint(120, 150), randint(20, 50)),
    MOUNTAIN_TAG: mountain_color,
    LAKE_TAG: lambda: rgb_to_hex(randint(50 , 127), randint(144, 160), 255)
}

FILL_TEXT = "#CCCCCC"

FILL_ACTION_BOX = "#333333"
FILL_CANCEL = "#BA0A0A"
FILL_OK = "#1C6203"
FILL_INFO = "#266CB6"

fill_brighter = {
    FILL_ACTION_BOX: "#514E4E",
    FILL_CANCEL: "#DB4E4E",
    FILL_OK: "#278E02",
    FILL_INFO: "#5397E0"
}

fill_darker = {
    FILL_ACTION_BOX: "#272626",
}


HIGHLIGHT_TAG_INDEX = 0
TRIGGER_TAG_INDEX = 1
DRAG_TAG_INDEX = 2
COLOR_TAG_INDEX = 3
HUD_TAG_INDEX = 4
GROUP_TAG_INDEX = 5


def eclaircir_couleur(hex_color: str, facteur: float) -> str:
    """
    √âclaircit une couleur hexad√©cimale.

    Args:
        hex_color (str): Couleur au format hexad√©cimal (ex: "#123456").
        facteur (float): Facteur d'√©claircissement (entre 0 et 1).
                         0.1 correspond √† un l√©ger √©claircissement, 1 pour un blanc total.

    Returns:
        str: Nouvelle couleur √©claircie au format hexad√©cimal.
    """
    if not (0 <= facteur <= 1):
        raise ValueError("Le facteur doit √™tre compris entre 0 et 1.")

    # Convertir le hex en valeurs RGB
    hex_color = hex_color.lstrip('#')
    r, g, b = int(hex_color[:2], 16), int(hex_color[2:4], 16), int(hex_color[4:], 16)

    # Appliquer l'√©claircissement
    r = int(r + (255 - r) * facteur)
    g = int(g + (255 - g) * facteur)
    b = int(b + (255 - b) * facteur)

    # Retourner le nouveau hex
    return f"#{r:02x}{g:02x}{b:02x}"


# Exemple d'utilisation
couleur_claire = eclaircir_couleur("#123456", 0.3)
print(couleur_claire)  # Affiche une couleur √©claircie


def set_tags(highlight_tag=NOTHING_TAG, trigger_tag=NOTHING_TAG, drag_tag=NOTHING_TAG,
             color_tag=FILL_ACTION_BOX, hud_tag=NOTHING_TAG, group_tag=""):
    """
    M√©thode qui sert √† uniformiser tous les √©l√©ments du canvas, ils ont tous comme tags ceux en param√®tres.

    :param highlight_tag: Le tag d√©terminant ce qui est trigger lors du clic gauche (g√©n√©ralement le feedback).
    :param trigger_tag: Le tag d√©terminant ce qui est trigger lors du clic gauche confirm√© (= apr√®s rel√¢chement sans mouvement de la souris entre le clic et le rel√¢chement).
    :param drag_tag: Le tag d√©terminant ce qui est trigger lors du drag clic gauche.
    :param color_tag: Le tag d√©terminant la couleur d'origine (sert pour remettre la couleur d'origine apr√®s un highlight)
    :param hud_tag: Le tag d√©terminant l'HUD auquel appartient l'√©l√©ment.
    :param group_tag: Le tag d√©terminant l'√©ventuel groupe auquel appartient l'√©l√©ment (sert dans le cas de comportements sp√©cifiques).
    :return: Tous les tags avec une valeur par d√©faut
    """
    return highlight_tag, trigger_tag, drag_tag, color_tag, hud_tag, group_tag

pad_from_borders = 15

def get_width_text(text: str):

    # On r√©cup√®re la font de base pour calculer la taille des rectangles
    text_font = font.nametofont("TkDefaultFont")

    # Mesurer la largeur et la hauteur du texte
    # Ici, ajout d'un pad sur la largeur pour √©viter d'avoir un rectangle PARFAITEMENT √† la largeur du texte
    return text_font.measure(text) + pad_from_borders

def separer_chaine_sans_couper(chaine, n):
    # V√©rifie que n est un entier positif
    if n <= 0:
        raise ValueError("n doit √™tre un entier positif non nul")

    # Cas o√π n == 1 : toute la cha√Æne dans un seul segment
    if n == 1:
        return chaine.strip()

    # Calcul de la longueur d'un segment approximatif
    segment_length = len(chaine) // n
    if segment_length == 0:
        raise ValueError("n est trop grand par rapport √† la longueur de la cha√Æne.")

    # Liste pour stocker les segments
    segments = []
    segment = ""

    # Parcours des mots
    for mot in chaine.split():
        # Ajoute le mot si le segment ne d√©passe pas la longueur cible
        if len(segment) + len(mot) + 1 <= segment_length:
            segment += (mot + " ")
        else:
            # Ajoute le segment termin√© √† la liste et d√©marre un nouveau
            segments.append(segment.strip())
            segment = mot + " "

    # Ajoute le dernier segment
    if segment:
        segments.append(segment.strip())

    # Assemble les segments avec "\n"
    return segments


Position = namedtuple('Position', ['x', 'y'])

# Quantit√© de ressources associ√©e au type de terre sur la carte
capacite_prod_terre = {"PLAIN" : 1, "MOUNTAIN" : 0.8, "LAKE" : 1, "FOREST" : 1.2}

noms_village = [
    "Lande-Cendr√©e",
    "Bois-Ruin√©",
    "Gorgemort",
    "Ombrecombe",
    "Rochebr√®che",
    "Val-Silencieux",
    "Tertre-Vaillant",
    "Creux-du-D√©chu",
    "Ab√Æmeclair",
    "Couronne-Froide",
    "Haute-D√©solation",
    "Fosse-du-Purg√©",
    "Larmes-Grises",
    "Tourbe-Sombre",
    "Havre-Fun√®bre",
    "S√©pultroc",
    "Pointe-Fl√©trie",
    "N√©croval",
    "Cime-Morne",
    "Pierrefeu",
    "Flammecreuse",
    "Aube-D√©l√©t√®re",
    "Brise-Ombre",
    "Chant-du-Vide",
    "Fanal-Terreux",
    "Ravin-Spectral",
    "Monts-Saignants",
    "Graviombre",
    "Givreclair",
    "Linceul-de-Vers",
    "Halte-P√¢le",
    "Grondeval",
    "Terre-Fumante",
    "Veine-Sanguine",
    "Pic-du-Vernis",
    "Grotte-des-Lamentations",
    "Vent-Glacial",
    "Clairi√®re-Creuse",
    "Failles-Grondantes",
    "Rive-Aust√®re",
    "Fort-Plaie",
    "Brasier-Cin√©raire",
    "C≈ìur-Bris√©",
    "Plaine-Hurlante",
    "Bastion-Froid",
    "D√©troit-du-Malheur",
    "Aiguilles-Mortelles",
    "Hauts-Rendus",
    "Lac-S√©pia",
    "Fond-du-D√©sespoir"
]

def nom_aleatoire_village():
    return choice(noms_village)

prenoms_perso = [ "Alaric", "B√©ranger", "Ad√©la√Øde", "Eudes", "Clotilde", "L√©onard", "Ysabeau", "Godefroy", "Agn√®s", "Hugues",
    "G√©raldine", "Baudoin", "Armand", "Isabeau", "Aim√©", "Perrin", "Tanguy", "Clothilde", "Florent", "Sygarde",
    "Gildas", "Th√©odora", "Renaud", "B√©atrice", "Geoffroy", "Hildegarde", "Roland", "Mathilde", "Thierry", "Gertrude",
    "Bernard", "Edwige", "Louis", "Aubr√©e", "G√©rald", "Ren√©e", "Fr√©d√©ric", "Alix", "Fr√©d√©rique", "Foulques",
    "H√©l√®ne", "Henri", "Aude", "Mathieu", "Judith", "Galeran", "Constance", "G√©raud", "Solange", "Renaude",
    "Esteban", "Eustache", "Brunehaut", "D√©odat", "Lancelot", "Lison", "El√©onore", "S√©n√©chal", "Aldegarde", "B√©atrice",
    "T√©rence", "Iseult", "Roger", "P√©pin", "Blanche", "Godefroy", "Tiberius", "Hildebrand", "Eadric", "Sigismond",
    "Ga√©tane", "√âl√©onore", "Thibault", "Isolde", "G√©ron", "Luce", "Guy", "Sibylle", "Bertrand", "Mathurin",
    "Lothaire", "Th√©odore", "Hermenegilde", "Aldric", "Adeline", "Justine", "Yvain", "Guibert", "P√©tronille", "Floriane",
    "Val√©rie", "Ulric", "Adh√©mar", "B√©reng√®re", "Gauthier", "Adalbert", "Lambert", "Gervais", "Clovis", "Eug√©nie",
    "H√©ribert", "Philom√®ne", "Mathias", "Fr√©d√©gonde", "Hildegarde", "√âdouard", "P√©tronille", "Ars√®ne", "Carlotta", "Geoffroy",
    "Aldebert", "Aymon", "B√©na", "G√©raldine", "Alv√©ran", "Th√©ophane", "Maud", "Roland", "Odilon", "Arnaud",
    "Ad√®le", "Ma√Øeul", "C√©cile", "Thierry", "Milburge", "Madeleine", "Hildegarde", "Olivier", "R√©macle", "H√©lier",
    "H√©l√®ne", "Eberhard", "C√¥me", "Eustache", "√âva", "Gr√©goire", "Aim√©e", "Fulbert", "Agn√®s", "Baudouin",
    "D√©sir√©", "Arnould", "Sybille", "Agathe", "Enguerrand", "Yvette", "Roderick", "Ivo", "Guillaume", "Otton",
    "L√©on", "Claire", "Dido", "Ernestine", "Cl√©ment", "Ir√®ne", "Gauthier", "B√©atrix", "Anselme", "Godefroy",
    "Quentin", "Madeleine", "Li√©vin", "Olric", "Odon", "G√©raud", "Venance", "Alix", "Eloise", "Engelbert",
    "Gauthier", "Raoul", "Th√©obald", "Perrine", "Ethelred", "Gis√®le", "Mathilde", "Thierry", "Fran√ßois", "Orabel",
    "Sigismond", "L√©onidas", "Godfrey", "Alice", "Audebert", "Romain", "Berthe", "Andr√©", "Maurin", "Agn√®s",
    "Godefroy", "Norbert", "Millicent", "Eulalie", "Bertrade", "Hermenegilde", "Louis", "Gilbert", "Beatrix", "Gildas"]

def prenom_aleatoire() :
    return choice(prenoms_perso)

noms_eglises = [
    "√âglise Saint-Pierre",
    "√âglise Notre-Dame",
    "√âglise Sainte-Marie",
    "√âglise Saint-Jean-Baptiste",
    "√âglise Saint-Paul",
    "√âglise Saint-Louis",
    "√âglise Saint-Augustin",
    "√âglise Saint-Antoine",
    "√âglise Sainte-Catherine",
    "√âglise Saint-Joseph",
    "√âglise Saint-Fran√ßois",
    "√âglise Saint-Andr√©",
    "√âglise Sainte-Th√©r√®se",
    "√âglise Saint-Honor√©",
    "√âglise Saint-Sulpice",
    "√âglise Sainte-Claire",
    "√âglise Saint-Denis",
    "√âglise Saint-Alexandre",
    "√âglise Sainte-Anne",
    "√âglise Saint-Michel",
    "√âglise Saint-Roch",
    "√âglise Sainte-Rita",
    "√âglise Saint-√âtienne",
    "√âglise Sainte-√âlisabeth",
    "√âglise Saint-Jean-de-Latran",
    "√âglise Saint-Martin",
    "√âglise Sainte-Bernadette",
    "√âglise Saint-Beno√Æt",
    "√âglise Saint-Marc",
    "√âglise Sainte-Madeleine",
    "√âglise Saint-Basile",
    "√âglise Saint-Hubert",
    "√âglise Saint-Pierre-et-Saint-Paul",
    "√âglise Sainte-V√©ronique",
    "√âglise Saint-Augustin-de-Canterbury",
    "√âglise Saint-Jean-de-Dieu",
    "√âglise Saint-Cyr",
    "√âglise Sainte-Victoire",
    "√âglise Saint-H√©lier",
    "√âglise Saint-L√©on",
    "√âglise Sainte-Famille",
    "√âglise Saint-Georges",
    "√âglise Saint-Jacques",
    "√âglise Sainte-Rose",
    "√âglise Saint-Nicolas",
    "√âglise Sainte-Marthe",
    "√âglise Saint-Jean-Eudes",
    "√âglise Saint-√âtienne-de-Montluc",
    "√âglise Saint-Dominique",
    "√âglise Saint-Louis-de-Gonzague",
    "√âglise Saint-Alban"
]

def nom_aleatoire_eglise() :
    return choice(noms_eglises)

noms_pretres = [
    "P√®re Augustin",
    "P√®re Bernard",
    "P√®re Thomas",
    "P√®re Fran√ßois",
    "P√®re Dominique",
    "P√®re Anselme",
    "P√®re Bonaventure",
    "P√®re Gr√©goire",
    "P√®re Pierre",
    "P√®re Beno√Æt",
    "P√®re Gr√©goire",
    "P√®re Jean",
    "P√®re Athanase",
    "P√®re J√©r√¥me",
    "P√®re Ignace",
    "P√®re Cyprien",
    "P√®re Hilaire",
    "P√®re Ambroise",
    "P√®re L√©on",
    "P√®re Isidore",
    "P√®re Martine",
    "P√®re Nicolas",
    "P√®re Jean",
    "P√®re Fran√ßois",
    "P√®re Pierre",
    "P√®re Vincent",
    "P√®re Louis",
    "P√®re Cl√©ment",
    "P√®re Polycarpe",
    "P√®re Ephrem",
    "P√®re Fulgence",
    "P√®re Augustin",
    "P√®re Gr√©goire",
    "P√®re Firmin",
    "P√®re Remi",
    "P√®re √âvode",
    "P√®re Richard",
    "P√®re Wenceslas",
    "P√®re Thomas",
    "P√®re Boniface",
    "P√®re Lambert",
    "P√®re G√©rard",
    "P√®re Hyacinthe",
    "P√®re Albin",
    "P√®re Martin",
    "P√®re Gaudentius",
    "P√®re Jean",
    "P√®re Th√©odore",
    "P√®re Basil",
    "P√®re S√©v√©rin"
]

def nom_aleatoire_pretres() :
    return choice(noms_pretres)

noms_nobles =[
    "Sir Guillaume",
    "Dame √âl√©onore",
    "Duc Geoffroy",
    "Comtesse Isabelle",
    "Baron Robert",
    "Seigneur Richard",
    "Princesse B√©atrice",
    "Sir Henri",
    "Dame Marguerite",
    "Vicomte Gilbert",
    "Duchesse Agn√®s",
    "Baronne Catherine",
    "Seigneur Thomas",
    "Comte Baudouin",
    "Princesse Alice",
    "Duc Philippe",
    "Dame Mathilde",
    "Sir Bertrand",
    "Comtesse Marie",
    "Seigneur Hugues",
    "Baronne Alice",
    "Sir Eustache",
    "Duchesse Jeanne",
    "Seigneur √âdouard",
    "Comtesse Blanche",
    "Baron Guillaume",
    "Dame C√©cile",
    "Duc √âdouard",
    "Sir Thomas",
    "Princesse H√©l√®ne",
    "Seigneur Alexandre",
    "Comtesse √âl√©onore",
    "Baron Richard",
    "Duchesse Mathilde",
    "Sir Jean",
    "Dame Isabelle",
    "Vicomte Robert",
    "Duc Henri",
    "Comtesse Sibylle",
    "Seigneur Simon",
    "Princesse Marguerite",
    "Baronne Jeanne",
    "Sir Robert",
    "Duchesse Agn√®s",
    "Dame Alice",
    "Comtesse Jeanne",
    "Seigneur Raymond",
    "Baronne Isabelle",
    "Sir Guy"]

def nom_aleatoire_nobles() :
    return choice(noms_nobles)



def dummy(*args):
    pass